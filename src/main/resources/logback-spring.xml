<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->
    <!-- appender是configuration的子节点，是负责写日志的组件。 -->
    <!-- ConsoleAppender：把日志输出到控制台 -->

    <!--
        property 定义属性，方便下面使用
        LOG_DIR：日志文件 ./log 当前目录下
        MAX_FILE_SIZE ： 日志文件最大的大小
        MAX_DAY: 日志文件保存天数
    -->

    <property name="LOG_DIR" value="./log"></property>
    <property name="MAX_FILE_SIZE" value="10MB"></property>
    <property name="MAX_DAY" value="30"></property>
    <!--
        appender: 负责写日志的组件,主要用于指定日志输出的目的地
        主要有三种类型：ConsoleAppender、FileAppender、RollingFileAppender
        ConsoleAppender:把日志输到控制台
        FileAppender:把日志输到文件
        RollingFileAppender:把日志输到文件并且进行定期的清理
    -->

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d %p (%file:%line\)- %m%n</pattern>
            <!--控制台也要使用UTF-8，不要使用GBK，否则会中文乱码-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是sys.log -->
    <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名-->
    <appender name="syslog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>log/sys.log</File>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件的名字根据fileNamePattern的值,每隔一段时间改变一次-->
            <fileNamePattern>log/sys.%d.%i.log</fileNamePattern>
            <maxHistory>${MAX_DAY}</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!--maxFileSize:这是活动文件的大小，默认值是10MB,本篇设置为1KB，只是为了演示 -->
                <maxFileSize>${MAX_FILE_SIZE}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- pattern节点，用来设置日志的输入格式 -->
            <pattern>
                %d %p (%file:%line\)- %m%n
            </pattern>
            <!--记录日志的编码-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- 控制台输出日志级别 -->
    <root level="info">
        <appender-ref ref="STDOUT" />
    </root>
    <!--logger:日志的记录器-->
    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
    <!-- com.appley为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
    <logger name="com.appleyk" level="DEBUG">
        <appender-ref ref="syslog" />
    </logger>



    <!-- 开发、测试环境 -->
   <!-- <springProfile name="dev,test">
        <logger name="org.springframework.web" level="INFO"/>
        <logger name="org.springboot.sample" level="INFO" />
        <logger name="com.yicheejia" level="INFO">
            <appender-ref ref="FILE"></appender-ref>
        </logger>
    </springProfile>-->

    <!-- 生产环境 -->
    <!--<springProfile name="prod">
        <logger name="org.springframework.web" level="ERROR"/>
        <logger name="org.springboot.sample" level="ERROR" />
        <logger name="com.yicheejia" level="ERROR" />
    </springProfile>-->

</configuration>